stages:
  - lint_test_coverage

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  - postgres:latest

variables:
  POSTGRES_DB: "postgres"
  TEST: "True"

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
  - ~/.cache/pip/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres.

test:
  stage: lint_test_coverage
  variables:
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
    DJANGO_SETTINGS_MODULE: "backend.settings-gitlab-ci"
  script:
    - cd backend && pip install -r requirements.txt
    - flake8
    - pytest --cov


test_unit:
  stage: lint_test_coverage
  image: node:latest
  script:
    - cd frontend
    - npm install
    - npm run lint
    - npm run test:unit

test_e2e:
  image: cypress/base:10
  stage: lint_test_coverage
  script:
    - cd frontend
    - npm install
    - npm run serve &
    - $(npm bin)/cypress run
